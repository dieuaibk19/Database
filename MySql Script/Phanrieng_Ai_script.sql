#SCRIPT TAO DATABASE

DROP DATABASE IF EXISTS shopee_fake;
CREATE DATABASE SHOPEE_FAKE;
USE SHOPEE_FAKE;
SET GLOBAL LOG_BIN_TRUST_FUNCTION_CREATORS = 1;

begin;

CREATE TABLE USER_(
USERNAME varchar(50) not null PRIMARY KEY,
PASSW    VARCHAR(20) NOT NULL,
RECOVERY_EMAIL varchar(50),
ACTIVE_DATE DATE
);

CREATE TABLE ADMIN_(
ID char(9) not null PRIMARY KEY,
NAME_AD nvarchar(50) not null,
PHONE_NUMBER_CUS varchar(10),
EMAIL varchar(50),
USERNAME varchar(16) not null,

FOREIGN KEY(USERNAME) REFERENCES USER_(USERNAME)
);

CREATE TABLE CUSTOMER_( 
ID_CUSTOMER char(9) not null PRIMARY KEY ,
NAME_CUS nvarchar(50) not null,
DATE_OF_BIRTH DATE NOT NULL ,
TYPE_CUS VARCHAR(10), 
USERNAME varchar(16) not null,

FOREIGN KEY(USERNAME) REFERENCES USER_(USERNAME)
);

-- key = id_cus + email
CREATE TABLE EMAIL_CUSTOMER_(
ID_CUS char(9) not null,
EMAIL_CUS varchar(50) ,
PRIMARY KEY(ID_CUS, EMAIL_CUS),

FOREIGN KEY (ID_CUS) REFERENCES CUSTOMER_(ID_CUSTOMER)
);

-- key = id_cus + address
CREATE TABLE ADDRESS_CUSTOMER_(
ID_CUS char(9) not null,
ADDRESS_CUS nvarchar(1000),
PRIMARY KEY(ID_CUS, ADDRESS_CUS),

FOREIGN KEY (ID_CUS) REFERENCES CUSTOMER_(ID_CUSTOMER)
);

-- key = id_cus + phone
CREATE TABLE PHONE_NUMBER_CUSTOMER_( 
ID_CUS char(9) not null,
PHONE_NUMBER_CUS varchar(10),
PRIMARY KEY(ID_CUS, PHONE_NUMBER_CUS),

FOREIGN KEY (ID_CUS) REFERENCES CUSTOMER_(ID_CUSTOMER)
);

CREATE TABLE SHIPPING_PARTNER_( 
NAME_SHIPPING_PARTNER nvarchar(50) not null PRIMARY KEY ,
DATE_START DATE ,
NUM_SUCESSFUL_ORDER INT CHECK (NUM_SUCESSFUL_ORDER >=0) DEFAULT 0
);


CREATE TABLE SHOP_( 
ID_SHOP char(9) not null PRIMARY KEY ,
NAME_SHOP nvarchar(50) not null, 
DATE_START DATE ,
NUM_OF_PRODUCT INT, 
ADDRESS_SHOP nvarchar(1000),
USERNAME varchar(16) not null,

FOREIGN KEY(USERNAME) REFERENCES USER_(USERNAME)
);

CREATE TABLE PERSONAL_PARTNER_(
ID_SHOP char(9) not null PRIMARY KEY ,
NAME_OWNER nvarchar(50) not null, 
NATION_SHOP nvarchar(50) not null, 
PHONE_NUMBER varchar(10) ,

FOREIGN KEY (ID_SHOP) REFERENCES SHOP_(ID_SHOP)
); 

CREATE TABLE BRAND_PARTNER_(
ID_SHOP char(9) not null PRIMARY KEY , 
NATION_SHOP nvarchar(50) not null , 
COMPANY_SIZE VARCHAR(10) DEFAULT 'MEDIUM',
NAME_REPRESENT nvarchar(50) not null,
HOTLINE_BRAND varchar(10) ,
EMAIL_BRAND varchar(50) ,

FOREIGN KEY (ID_SHOP) REFERENCES SHOP_(ID_SHOP)
); 

CREATE TABLE _CORPORATE_WITH_(
ID_SHOP char(9) not null ,
NAME_SHIPPING_PARTNER nvarchar(50) not null,

PRIMARY KEY(ID_SHOP, NAME_SHIPPING_PARTNER),
FOREIGN KEY (ID_SHOP) REFERENCES SHOP_(ID_SHOP),
FOREIGN KEY (NAME_SHIPPING_PARTNER) REFERENCES SHIPPING_PARTNER_(NAME_SHIPPING_PARTNER)
);

CREATE TABLE ORDER_( 
ID_CUS char(9) not null,
ID_ORDER char(9) not null PRIMARY KEY, 
STATUS_ORDER nVARCHAR(20) DEFAULT 'Chờ xác nhận',
ADDRESS_ORDER nvarchar(1000), 
PAYMENT_METHOD CHAR(3) NOT NULL DEFAULT 'COD',   #COD or ONL
SHIPPING_FEE double(10,2) NOT NULL DEFAULT 0,
NAME_SHIPPING_PARTNER nvarchar(50) not null,
TOTAL_PRICE double(10,2) default null,

FOREIGN KEY (ID_CUS) REFERENCES CUSTOMER_(ID_CUSTOMER),
FOREIGN KEY (NAME_SHIPPING_PARTNER) REFERENCES SHIPPING_PARTNER_(NAME_SHIPPING_PARTNER)
);



CREATE TABLE DISCOUNT_(
DISCOUNT_CODE CHAR(9) NOT NULL,
DISCOUNT_VALUE INT check (DISCOUNT_VALUE > 0) NOT NULL default 1,
DISCOUNT_TYPE CHAR(7) NOT NULL CHECK (DISCOUNT_TYPE IN ('Voucher', 'Coupon')) DEFAULT 'Voucher', #VOUCHER or COUPON
VALID_DATE DATE NOT NULL,
EXPIRE_DATE DATE NOT NULL,
DISCOUNT_DESCRIPTION nvarchar(250),

PRIMARY KEY (DISCOUNT_CODE)
);

CREATE TABLE SHOP_DIS_(
DISCOUNT_CODE CHAR(9) NOT NULL,
ID_SHOP CHAR(9) NOT NULL,
SHOP_DIS_TYPE VARCHAR(10) NOT NULL CHECK (SHOP_DIS_TYPE IN ('Normal', 'Subscribed')) DEFAULT 'Normal', #Normal or Subscribed


PRIMARY KEY (DISCOUNT_CODE),
FOREIGN KEY (DISCOUNT_CODE) REFERENCES DISCOUNT_(DISCOUNT_CODE),
FOREIGN KEY (ID_SHOP) REFERENCES SHOP_(ID_SHOP)
);

CREATE TABLE SYSTEM_DIS_(
DISCOUNT_CODE CHAR(9) NOT NULL,
CAMPAIGN NVARCHAR(100) ,
SYS_DIS_TYPE  CHAR(7) NOT NULL CHECK (SYS_DIS_TYPE IN ('Normal', 'Silver', 'Golden', 'Diamond')) DEFAULT 'Normal' , #Normal, Silver, Golden, Diamond

PRIMARY KEY (DISCOUNT_CODE),
FOREIGN KEY (DISCOUNT_CODE) REFERENCES DISCOUNT_(DISCOUNT_CODE)
);


CREATE TABLE _APPLY_( 
ID_ORDER char(9) not null ,
DISCOUNT_CODE char(9) not null,

PRIMARY KEY (ID_ORDER, DISCOUNT_CODE),
FOREIGN KEY (ID_ORDER) REFERENCES ORDER_(ID_ORDER),
FOREIGN KEY (DISCOUNT_CODE) REFERENCES DISCOUNT_(DISCOUNT_CODE) 
);


CREATE TABLE PRODUCT_(
ID_PRODUCT char(9) not null , 
ID_SHOP char(9) not null ,
NAME_PRODUCT nvarchar(50) not null,
IMAGE_PRODUCT blob,
DISCRIPTION nvarchar(1000) ,
PRICE_PRODUCT double(10,2) NOT NULL,
NUM_ADD INT NOT NULL DEFAULT 0,
NUM_SOLD INT NOT NULL DEFAULT 0,
NUM_CURR INT NOT NULL DEFAULT 0,

PRIMARY KEY (ID_PRODUCT, ID_SHOP),
FOREIGN KEY (ID_SHOP) REFERENCES SHOP_(ID_SHOP)
);


CREATE TABLE CATEGORY_( 
NAME_CATEGORY nvarchar(50) not null PRIMARY KEY ,
DISCRIPTION nvarchar(1000)
);

CREATE TABLE CART_(
ID_CUS char(9) not null,
NUM_KIND INT,

PRIMARY KEY(ID_CUS),
FOREIGN KEY (ID_CUS) REFERENCES CUSTOMER_(ID_CUSTOMER)
);

CREATE TABLE _INCLUDE_( 
ID_CUS_CART char(9) not null,
ID_PRODUCT char(9) not null , 
ID_SHOP char(9) not null,
NUM_PRODUCT INT NOT NULL DEFAULT 0,
DATE_ADD DATE,

PRIMARY KEY(ID_PRODUCT, ID_SHOP, ID_CUS_CART),
FOREIGN KEY (ID_CUS_CART) REFERENCES CART_(ID_CUS),
FOREIGN KEY (ID_PRODUCT) REFERENCES PRODUCT_(ID_PRODUCT),
FOREIGN KEY (ID_SHOP) REFERENCES PRODUCT_(ID_SHOP)
);

CREATE TABLE _BONUS_FOR_(
ID_MINOR_PRODUCT char(9) not null , 
ID_MINOR_SHOP char(9) not null,
ID_MAJOR_PRODUCT char(9) not null,
ID_MAJOR_SHOP char(9) not null,

PRIMARY KEY(ID_MINOR_PRODUCT, ID_MINOR_SHOP, ID_MAJOR_PRODUCT, ID_MAJOR_SHOP),
FOREIGN KEY(ID_MINOR_PRODUCT) REFERENCES PRODUCT_(ID_PRODUCT),
FOREIGN KEY(ID_MAJOR_PRODUCT) REFERENCES PRODUCT_(ID_PRODUCT),
FOREIGN KEY(ID_MINOR_SHOP) REFERENCES PRODUCT_(ID_SHOP),
FOREIGN KEY(ID_MINOR_SHOP) REFERENCES PRODUCT_(ID_SHOP)
);

CREATE TABLE _CONTAIN_( 
ID_ORDER char(9) not null, 
ID_PRODUCT char(9) not null,
ID_SHOP char(9) not null,
NUM_PRODUCT INT NOT NULL ,

PRIMARY KEY(ID_PRODUCT, ID_SHOP, ID_ORDER),
FOREIGN KEY(ID_PRODUCT) REFERENCES PRODUCT_(ID_PRODUCT),
FOREIGN KEY(ID_SHOP) REFERENCES PRODUCT_(ID_SHOP),
FOREIGN KEY(ID_ORDER) REFERENCES ORDER_(ID_ORDER)
);

CREATE TABLE _BELONG_TO_(
ID_PRODUCT char(9) not null,
ID_SHOP char(9) not null,
NAME_CATEGORY nvarchar(50) not null,

PRIMARY KEY(ID_PRODUCT, ID_SHOP, NAME_CATEGORY),
FOREIGN KEY(ID_PRODUCT) REFERENCES PRODUCT_(ID_PRODUCT),
FOREIGN KEY(ID_SHOP) REFERENCES PRODUCT_(ID_SHOP),
FOREIGN KEY (NAME_CATEGORY) REFERENCES CATEGORY_(NAME_CATEGORY)
);

CREATE TABLE IMPORT_INFO_(
ID_BILL char(9) not null,
ID_SHOP char(9) not null,
NUMKIND INT,
DATE_BILL DATE,

PRIMARY KEY (ID_BILL),
FOREIGN KEY (ID_SHOP) REFERENCES SHOP_(ID_SHOP)
);

CREATE TABLE PRODUCT_LIST_(
ID_BILL char(9) not null,
ID_PRODUCT char(9) not null,
NUM INT NOT NULL DEFAULT 0 CHECK(NUM>=0),

PRIMARY KEY (ID_BILL, ID_PRODUCT),
FOREIGN KEY (ID_BILL) REFERENCES IMPORT_INFO_(ID_BILL)
);


DELIMITER $$
CREATE PROCEDURE PROC_INSERT_CATEGORY_ (IN P_NAME_CATEGORY VARCHAR(50), IN P_DISCRIPTION VARCHAR(1000))
BEGIN

IF EXISTS( SELECT *    FROM CATEGORY_   WHERE NAME_CATEGORY = P_NAME_CATEGORY)
       THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'PROC_INSERT_ CATEGORY_ ERROR: TRUNG NAME_CATEGORY, VUI LONG NHAP LAI!';
ELSE INSERT INTO CATEGORY_ VALUES (P_NAME_CATEGORY , P_DISCRIPTION);

END IF ;

END $$
DELIMITER ;

# TEST PROC1 
#DROP PROCEDURE PROC_INSERT_ CATEGORY_; 
CALL PROC_INSERT_CATEGORY_('Giay','Cac mau giay hot 2021');
#CALL PROC_INSERT_CATEGORY_('Sach','Sach Van Hoc');



DELIMITER $$
CREATE TRIGGER TRIG_INSERT_CORPORATE_WITH_ 
BEFORE INSERT ON _CORPORATE_WITH_ FOR EACH ROW
BEGIN

IF EXISTS(SELECT * FROM _CORPORATE_WITH_  WHERE ID_SHOP=NEW.ID_SHOP AND NAME_SHIPPING_PARTNER = NEW.NAME_SHIPPING_PARTNER) 
THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='TRIG_INSERT_ CORPORATE_WITH_  ERROR: TRUNG DON VI VAN CHUYEN DA TON TAI TRONG SHOP!';

IF NOT EXISTS( SELECT *    FROM SHOP_   WHERE ID_SHOP = NEW.ID_SHOP )
THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='TRIG_INSERT_ CORPORATE_WITH_  ERROR: SHOP KHONG TON TAI!';

ELSE IF NOT EXISTS (SELECT *    FROM SHIPPING_PARTNER_   WHERE NAME_SHIPPING_PARTNER = NEW.NAME_SHIPPING_PARTNER)
THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='TRIG_INSERT_ CORPORATE_WITH_  ERROR: KHONG TON TAI DON VI VAN CHUYEN NAY!';


END IF ;
END IF ;
END IF ;


END 
$$DELIMITER ;

INSERT INTO _CORPORATE_WITH_ VALUES ('SHP00001', 'J&T Express');



DELIMITER $$
CREATE TRIGGER TRIG_INSERT_CONTAIN
BEFORE INSERT ON _CONTAIN_ FOR EACH ROW
BEGIN
	DECLARE PRI INT DEFAULT 0;
    
    IF NOT EXISTS( SELECT * FROM ORDER_   WHERE ID_ORDER = NEW.ID_ORDER )
       THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'TRIG_INSERT_CONTAIN ERROR: KHONG TIM THAY ORDER, VUI LONG NHAP LAI!';
	END IF;
    
	IF NOT EXISTS( SELECT * FROM PRODUCT_   WHERE ID_PRODUCT = NEW.ID_PRODUCT AND ID_SHOP = NEW.ID_SHOP  )
       THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'TRIG_INSERT_CONTAIN ERROR: BAN DANG THEM MOT SAN PHAM KHONG TON TAI TRONG SHOP, VUI LONG NHAP LAI!';
	END IF;
	
	IF (NEW.NUM_PRODUCT<= 0) 
		THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'TRIG_INSERT_CONTAIN ERROR: SO LUONG NHO NHAT LA 1, VUI LONG NHAP LAI!';
	END IF;
    
    IF (NEW.NUM_PRODUCT > (SELECT NUM_CURR FROM PRODUCT_ WHERE ID_PRODUCT = NEW.ID_PRODUCT AND ID_SHOP = NEW.ID_SHOP)) 
		THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'TRIG_INSERT_CONTAIN ERROR: SHOP KHONG DU MAT HANG NAY, MOI BAN MUA MON KHAC!';
	END IF;
    
    SET PRI = (SELECT PRICE_PRODUCT FROM PRODUCT_ WHERE ID_PRODUCT = NEW.ID_PRODUCT AND ID_SHOP = NEW.ID_SHOP);
    
   
    UPDATE ORDER_ SET TOTAL_PRICE= TOTAL_PRICE + PRI*NEW.NUM_PRODUCT WHERE ID_ORDER=NEW.ID_ORDER;

   
    UPDATE PRODUCT_ SET NUM_SOLD= NUM_SOLD+NEW.NUM_PRODUCT WHERE ID_PRODUCT = NEW.ID_PRODUCT AND ID_SHOP = NEW.ID_SHOP;
    
	UPDATE PRODUCT_ SET NUM_CURR= NUM_CURR-NUM_SOLD WHERE ID_PRODUCT = NEW.ID_PRODUCT AND ID_SHOP = NEW.ID_SHOP;
    
    
END $$
DELIMITER ;

#TEST TRIG_AI: MỖI LẦN TEST THÌ CHỌN 1 MÃ PRODUCT, SHOP KHÁC 

DROP TRIGGER TRIG_INSERT_CONTAIN ;
SELECT * FROM ORDER_ WHERE ID_ORDER= 'ORD000001';
SELECT * FROM PRODUCT_ WHERE ID_PRODUCT = 'PRO000001' AND ID_SHOP = 'SHP000002';
INSERT INTO _CONTAIN_ VALUES ("ORD000001","PRO000001","SHP000002",3);
SELECT * FROM ORDER_ WHERE ID_ORDER= 'ORD000001';
SELECT * FROM PRODUCT_ WHERE ID_PRODUCT = 'PRO000001' AND ID_SHOP = 'SHP000002';



DELIMITER $$

CREATE PROCEDURE PROC_SEE_ORDER_INFO ( IN P_ID_CUS CHAR(9) )
BEGIN
SELECT O.ID_ORDER 
FROM ORDER_ O
WHERE O.ID_CUS=P_ID_CUS ;

END
$$ DELIMITER ;

CALL PROC_SEE_ORDER_INFO('CUS000001');

DELIMITER $$
CREATE PROCEDURE PROC_LIST_SHOP_INFO ( IN P_LIM INT )
BEGIN

SELECT S.ID_SHOP, S.NAME_SHOP, (SELECT SUM(NUM_PRODUCT) FROM _CONTAIN_ WHERE ID_SHOP= S.ID_SHOP) AS TOTAL_SUM
FROM SHOP_ S, _CONTAIN_ CT
GROUP BY S.ID_SHOP 
HAVING  TOTAL_SUM >= P_LIM
ORDER BY S.ID_SHOP;


END $$
DELIMITER ;

#TEST PROC_LIST_SHOP_INFO
# DROP PROCEDURE PROC_LIST_SHOP_INFO;
CALL PROC_LIST_SHOP_INFO(30)

DELIMITER $$
CREATE FUNCTION FIND_SUMPRO_ORDER(P_ID CHAR(9))
RETURNS INT 

BEGIN
	DECLARE ID_S CHAR(9); 
	DECLARE ID_P CHAR(9);
	DECLARE NUM INT DEFAULT 0;
	DECLARE S INT DEFAULT 0 ;	
	DECLARE FINISHED INT DEFAULT FALSE;
	DECLARE CUR1 CURSOR FOR SELECT ID_SHOP, ID_PRODUCT,NUM_CURR FROM PRODUCT_;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = TRUE;

    
	IF NOT EXISTS(SELECT * FROM SHOP_ WHERE ID_SHOP = P_ID ) THEN RETURN -1; 
	ELSE
 
	OPEN CUR1;
  
		READ_LOOP: LOOP
    
			FETCH CUR1 INTO ID_S, ID_P, NUM;
			IF FINISHED THEN LEAVE READ_LOOP;
			END IF;
    
			IF (ID_S = P_ID ) THEN SET S = S + NUM;
			END IF;
 
		END LOOP;

  CLOSE CUR1;
  END IF;
RETURN S;

END 
$$ DELIMITER ;



DROP FUNCTION FIND_SUMPRO_ORDER;
#SELECT FIND_SUMPRO_ORDER('SHP000011');
#SELECT FIND_SUMPRO_ORDER('SKP000011');




DELIMITER $$
CREATE FUNCTION FIND_SUMPRICESOLD_ORDER(P_ID CHAR(9))
RETURNS DOUBLE(10,2) 

BEGIN
	DECLARE ID_S CHAR(9); 
   	DECLARE ID_P CHAR(9);
	DECLARE PRI DOUBLE(10,2) DEFAULT 0; 
	DECLARE NUM INT DEFAULT 0;
	DECLARE S DOUBLE(10,2) DEFAULT 0 ;	
	DECLARE FINISHED INT DEFAULT FALSE;
	DECLARE CUR1 CURSOR FOR SELECT ID_SHOP, ID_PRODUCT, PRICE_PRODUCT,NUM_SOLD FROM PRODUCT_;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = TRUE;

    
	IF NOT EXISTS(SELECT * FROM SHOP_ WHERE ID_SHOP = P_ID ) THEN RETURN -1; 
	ELSE
 
	OPEN CUR1;
  
		READ_LOOP: LOOP
    
			FETCH CUR1 INTO ID_S, ID_P, PRI, NUM;
			IF FINISHED THEN LEAVE READ_LOOP;
			END IF;
    
			IF (ID_S = P_ID ) THEN SET S = S + PRI*NUM;
			END IF;
 
		END LOOP;

  CLOSE CUR1;
  END IF;
RETURN S;

END $$
DELIMITER ;



DROP FUNCTION FIND_SUMPRICESOLD_ORDER;
SELECT FIND_SUMPRICESOLD_ORDER('SHP000011');
#SELECT FIND_SUMPRICESOLD_ORDER('SKP000011');














